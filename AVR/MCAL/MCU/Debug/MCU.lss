
MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001d4  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000a2c  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000009fb  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000166f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001680  2**2
                  CONTENTS, READONLY
  6 .debug_info   000004e6  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004a3  00000000  00000000  00001ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00002045  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00002062  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  64:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Lib_vDelayMs>:
/*  input 		-> Time value of delay -> copy_u16time              */
/*  output		-> N/A											    */
/********************************************************************/

void Lib_vDelayMs(u16 copy_u16time)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2a 97       	sbiw	r28, 0x0a	; 10
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	9a 87       	std	Y+10, r25	; 0x0a
  82:	89 87       	std	Y+9, r24	; 0x09
	u32 Local_CountNumber;
	/*--------------------------------------------------------------*/

	/*----------------------main implementation---------------------*/

	for (Local_CountNumber=NULL; Local_CountNumber < copy_u16time ; Local_CountNumber++)
  84:	1d 82       	std	Y+5, r1	; 0x05
  86:	1e 82       	std	Y+6, r1	; 0x06
  88:	1f 82       	std	Y+7, r1	; 0x07
  8a:	18 86       	std	Y+8, r1	; 0x08
  8c:	28 c0       	rjmp	.+80     	; 0xde <Lib_vDelayMs+0x72>
		/*----------------------------------------------------------*/
		/* outer loop which runs multiple of 1ms					*/
		/* -> lower limit: 0										*/
		/* -> upper limit: copy_u16time 						    */
		/*----------------------------------------------------------*/
		for(Local_InsideLoopCounter = NULL; Local_InsideLoopCounter < LIB_U8_UPPER_THRESHOLD ; Local_InsideLoopCounter++)
  8e:	19 82       	std	Y+1, r1	; 0x01
  90:	1a 82       	std	Y+2, r1	; 0x02
  92:	1b 82       	std	Y+3, r1	; 0x03
  94:	1c 82       	std	Y+4, r1	; 0x04
  96:	0f c0       	rjmp	.+30     	; 0xb6 <Lib_vDelayMs+0x4a>
	...
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	9a 81       	ldd	r25, Y+2	; 0x02
  a4:	ab 81       	ldd	r26, Y+3	; 0x03
  a6:	bc 81       	ldd	r27, Y+4	; 0x04
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	a1 1d       	adc	r26, r1
  ac:	b1 1d       	adc	r27, r1
  ae:	89 83       	std	Y+1, r24	; 0x01
  b0:	9a 83       	std	Y+2, r25	; 0x02
  b2:	ab 83       	std	Y+3, r26	; 0x03
  b4:	bc 83       	std	Y+4, r27	; 0x04
  b6:	89 81       	ldd	r24, Y+1	; 0x01
  b8:	9a 81       	ldd	r25, Y+2	; 0x02
  ba:	ab 81       	ldd	r26, Y+3	; 0x03
  bc:	bc 81       	ldd	r27, Y+4	; 0x04
  be:	80 3d       	cpi	r24, 0xD0	; 208
  c0:	91 05       	cpc	r25, r1
  c2:	a1 05       	cpc	r26, r1
  c4:	b1 05       	cpc	r27, r1
  c6:	40 f3       	brcs	.-48     	; 0x98 <Lib_vDelayMs+0x2c>
	for (Local_CountNumber=NULL; Local_CountNumber < copy_u16time ; Local_CountNumber++)
  c8:	8d 81       	ldd	r24, Y+5	; 0x05
  ca:	9e 81       	ldd	r25, Y+6	; 0x06
  cc:	af 81       	ldd	r26, Y+7	; 0x07
  ce:	b8 85       	ldd	r27, Y+8	; 0x08
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	a1 1d       	adc	r26, r1
  d4:	b1 1d       	adc	r27, r1
  d6:	8d 83       	std	Y+5, r24	; 0x05
  d8:	9e 83       	std	Y+6, r25	; 0x06
  da:	af 83       	std	Y+7, r26	; 0x07
  dc:	b8 87       	std	Y+8, r27	; 0x08
  de:	89 85       	ldd	r24, Y+9	; 0x09
  e0:	9a 85       	ldd	r25, Y+10	; 0x0a
  e2:	cc 01       	movw	r24, r24
  e4:	a0 e0       	ldi	r26, 0x00	; 0
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	2d 81       	ldd	r18, Y+5	; 0x05
  ea:	3e 81       	ldd	r19, Y+6	; 0x06
  ec:	4f 81       	ldd	r20, Y+7	; 0x07
  ee:	58 85       	ldd	r21, Y+8	; 0x08
  f0:	28 17       	cp	r18, r24
  f2:	39 07       	cpc	r19, r25
  f4:	4a 07       	cpc	r20, r26
  f6:	5b 07       	cpc	r21, r27
  f8:	50 f2       	brcs	.-108    	; 0x8e <Lib_vDelayMs+0x22>
			asm("nop");
			asm("nop");
		}
	}

}
  fa:	00 00       	nop
  fc:	2a 96       	adiw	r28, 0x0a	; 10
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	de bf       	out	0x3e, r29	; 62
 104:	0f be       	out	0x3f, r0	; 63
 106:	cd bf       	out	0x3d, r28	; 61
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <Lib_vDelayUs>:
/*				 the given input value of time in microseconds  */
/*  input 		-> Time value of delay                          */
/*  output		-> N/A											*/
/****************************************************************/
void Lib_vDelayUs(u16 copy_u16time)
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	00 d0       	rcall	.+0      	; 0x114 <Lib_vDelayUs+0x6>
 114:	00 d0       	rcall	.+0      	; 0x116 <Lib_vDelayUs+0x8>
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	9c 83       	std	Y+4, r25	; 0x04
 11c:	8b 83       	std	Y+3, r24	; 0x03
	/* this formula is used to calculate T1, T2, T3, then       */
	/* then calculate the number of iterations needed to 		*/
	/* generate the required delay in microseconds              */
	/*----------------------------------------------------------*/

	u16 local_CountNumber = (copy_u16time - LIB_U8_TOTAL_CALCULATED) / LIB_U8_AVG_TIME_PER_ITERATION;
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	9c 81       	ldd	r25, Y+4	; 0x04
 122:	45 97       	sbiw	r24, 0x15	; 21
 124:	9c 01       	movw	r18, r24
 126:	a9 e8       	ldi	r26, 0x89	; 137
 128:	b8 e8       	ldi	r27, 0x88	; 136
 12a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <__umulhisi3>
 12e:	96 95       	lsr	r25
 130:	87 95       	ror	r24
 132:	96 95       	lsr	r25
 134:	87 95       	ror	r24
 136:	96 95       	lsr	r25
 138:	87 95       	ror	r24
 13a:	9a 83       	std	Y+2, r25	; 0x02
 13c:	89 83       	std	Y+1, r24	; 0x01

	for(;local_CountNumber > NULL; local_CountNumber--)
 13e:	06 c0       	rjmp	.+12     	; 0x14c <Lib_vDelayUs+0x3e>
	{
			asm("nop");
 140:	00 00       	nop
	for(;local_CountNumber > NULL; local_CountNumber--)
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	9a 81       	ldd	r25, Y+2	; 0x02
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	9a 83       	std	Y+2, r25	; 0x02
 14a:	89 83       	std	Y+1, r24	; 0x01
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	9a 81       	ldd	r25, Y+2	; 0x02
 150:	89 2b       	or	r24, r25
 152:	b1 f7       	brne	.-20     	; 0x140 <Lib_vDelayUs+0x32>
	}
}
 154:	00 00       	nop
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <MCU_vEnableGlobalInterrupt>:
/*              through												*/
/* Inputs: void														*/
/* Outputs: void													*/
/********************************************************************/
void MCU_vEnableGlobalInterrupt(void)
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
	/* Enable interrupts by setting I-bit          */
	MCU_u8_SREG |= (EXTI_u8_GIE_ENABLE << MCU_u8_SREG_IBIT);
 16c:	8f e5       	ldi	r24, 0x5F	; 95
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	fc 01       	movw	r30, r24
 172:	20 81       	ld	r18, Z
 174:	8f e5       	ldi	r24, 0x5F	; 95
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	20 68       	ori	r18, 0x80	; 128
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
}
 17e:	00 00       	nop
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <MCU_vDisableGlobalInterrupt>:
/* 				pass through										*/
/* Inputs: void														*/
/* Outputs: void													*/
/********************************************************************/
void MCU_vDisableGlobalInterrupt(void)
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
	/* Disable interrupts by clearing I-bit        */
	MCU_u8_SREG &= (~(EXTI_u8_GIE_ENABLE<<MCU_u8_SREG_IBIT));
 18e:	8f e5       	ldi	r24, 0x5F	; 95
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	fc 01       	movw	r30, r24
 194:	20 81       	ld	r18, Z
 196:	8f e5       	ldi	r24, 0x5F	; 95
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	2f 77       	andi	r18, 0x7F	; 127
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18
}
 1a0:	00 00       	nop
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <main>:
 *      Author: islash8-i3
 */


void main (void)
{
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
	while(1)
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <main+0x8>

000001b2 <__umulhisi3>:
 1b2:	a2 9f       	mul	r26, r18
 1b4:	b0 01       	movw	r22, r0
 1b6:	b3 9f       	mul	r27, r19
 1b8:	c0 01       	movw	r24, r0
 1ba:	a3 9f       	mul	r26, r19
 1bc:	70 0d       	add	r23, r0
 1be:	81 1d       	adc	r24, r1
 1c0:	11 24       	eor	r1, r1
 1c2:	91 1d       	adc	r25, r1
 1c4:	b2 9f       	mul	r27, r18
 1c6:	70 0d       	add	r23, r0
 1c8:	81 1d       	adc	r24, r1
 1ca:	11 24       	eor	r1, r1
 1cc:	91 1d       	adc	r25, r1
 1ce:	08 95       	ret

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
