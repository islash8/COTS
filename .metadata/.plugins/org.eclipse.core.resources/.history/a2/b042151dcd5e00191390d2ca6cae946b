/********************************************************************/
/* Author  : Islam A.                                               */
/* Date    : 14 APR ٌِ؛ 2019                                           */
/* Version : V01                                                    */
/********************************************************************/
/* Description                                                      */
/* ------------                                                     */
/* This is the program file which includes the logic for external	*/
/* interrupts for ATmega32											*/
/********************************************************************/

/* Header files included in this source code file					*/
#include "STD_Types.h"
#include "EXTI_Interface.h"
#include "EXTI_Private.h"

/* Global variables definition section								*/
static void (* APFvFunctionCallBack[EXTI_u8_NO_OF_INTERRUPTS]) (void)
= {NULL_PTR, NULL_PTR, NULL_PTR};

/********************************************************************/
/* Name: EXTI_vInitialize											*/
/* Description: This is an API used to initialize external interrupt*/
/* Inputs: void														*/
/* Outputs: void													*/
/********************************************************************/
void EXTI_vInitialize (void)
{
	/* Local variables definitions 									*/
	u8 local_LoopCounter;

	/* Disable external interrupts by clearing I-bit in SREG		*/
	MCU_u8_SREG &= (~(1 << MCU_u8_SREG_I_BIT));

	/* Loop used to initialize values for interrupt registers		*/
	for(local_LoopCounter = NULL; local_LoopCounter < EXTI_u8_NO_OF_INTERRUPTS; local_LoopCounter++)
	{
		/* Set the interrupt enable state, whether it's enable or 	*/
		/* disable													*/
		EXTI_SetInterruptState(local_LoopCounter, EXTI_Au8InterruptState[local_LoopCounter]);

		/* Set the interrupt trigger mode							*/
		EXTI_SetInterruptTrigger (local_LoopCounter, EXTI_Au8InterruptSensingTrigger[local_LoopCounter]);
	}

	/* Enable Interrupts in I-bit in SREG register					*/
	MCU_u8_SREG |= (1 << MCU_u8_SREG_I_BIT);
}

/********************************************************************/
/* Name: EXTI_SetCallBack											*/
/* Description: This function takes a function as an input argument */
/*				and saves it in a pointer to function, this is set  */
/*              to let the ISR call the callback function which will*/
/*				be executed whenever a corresponding interrupt 		*/
/*				occurs												*/
/* Inputs: function name (copy_PFvFunctionName)						*/
/*		   interrupt number (copy_u8InterruptNB)					*/
/* Outputs: error status											*/
/********************************************************************/
u8 EXTI_SetCallBack(void (* copy_PFvFunctionName)(void), u8 copy_u8InterruptNB)
{
	/* local variable definitions 									*/
	u8 local_ErrorState = STD_ERROR_OK;

	/* Check for input argument valid or not						*/
	if(copy_u8InterruptNB >= EXTI_u8_NO_OF_INTERRUPTS)
	{
		local_ErrorState = STD_ERROR_OK;
	}
	else
	{
		/* Set pointer with address of passed function				*/
		APFvFunctionCallBack[copy_u8InterruptNB] = copy_PFvFunctionName;
	}

	/*return state													*/
	return local_ErrorState;
}
